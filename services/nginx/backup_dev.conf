server {
    listen 80 default_server;
    server_name 34.220.153.193;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        alias /static/;
    }

    location / {
        proxy_pass          http://server:8000;
        proxy_redirect      default;
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host $server_name;
    }

#    return 301 https://$host$request_uri;
}


#server {
#    listen   80;

#    client_max_body_size 4G;
#    #access_log /home/ubuntu/logs/nginx-access.log;
#    #error_log /home/ubuntu/logs/nginx-error.log;
#    return 301 https://$host$request_uri;
#}

server {
    listen              443 ssl;
    server_name         34.220.153.193;
    ssl_certificate /etc/letsencrypt/live/34.220.153.193/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/34.220.153.193/privkey.pem;
    ssl_protocols       SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location /static/ {
         alias /static/;
    }

    location /media/ {
        alias /media/;
    }

    location / {

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://34.220.153.193;
            break;
        }
    }

    # Error pages
;     error_page 500 502 503 504 /500.html;
;     location = /500.html {
;         root /var/www/youbot_site/youbot-site/static/;
;     }

}



















;     listen 443 ssl;
;     server_name 34.220.153.193;
;     ssl_certificate /etc/letsencrypt/live/34.220.153.193/fullchain.pem;
;     ssl_certificate_key /etc/letsencrypt/live/34.220.153.193/privkey.pem;
    #include /etc/letsencrypt/options-ssl-nginx.conf;
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    #location /static/uploads/ {
    #    alias /uploads/;
    #}

    #location /static/audios/ {
    #    alias /audios/;
    #}

;     location /static/ {
;         alias /static/;
;     }

    #location /media/ {
    #    alias /media/;
    #}

;     location / {
;         proxy_pass          http://server:8000;
;         proxy_redirect      default;
;         proxy_set_header    Host $host;
;         proxy_set_header    X-Real-IP $remote_addr;
;         proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
;         proxy_set_header    X-Forwarded-Host $server_name;
;     }

    # Error pages
    #error_page 500 502 503h 504 /500.html;
    #location = /500.html {
    #    root /static/;
    #}
#}


